/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3858873531497406760L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"com.example\",\"fields\":[{\"name\":\"StartTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"EndDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"EndTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"EventTitle\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"AllDayEvent\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"NoEndTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"EventDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<User> ENCODER =
      new BinaryMessageEncoder<User>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<User> DECODER =
      new BinaryMessageDecoder<User>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<User> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<User> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<User>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this User to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a User from a ByteBuffer. */
  public static User fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String StartTime;
   private java.lang.String EndDate;
   private java.lang.String EndTime;
   private java.lang.String EventTitle;
   private java.lang.String AllDayEvent;
   private java.lang.String NoEndTime;
   private java.lang.String EventDescription;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public User() {}

  /**
   * All-args constructor.
   * @param StartTime The new value for StartTime
   * @param EndDate The new value for EndDate
   * @param EndTime The new value for EndTime
   * @param EventTitle The new value for EventTitle
   * @param AllDayEvent The new value for AllDayEvent
   * @param NoEndTime The new value for NoEndTime
   * @param EventDescription The new value for EventDescription
   */
  public User(java.lang.String StartTime, java.lang.String EndDate, java.lang.String EndTime, java.lang.String EventTitle, java.lang.String AllDayEvent, java.lang.String NoEndTime, java.lang.String EventDescription) {
    this.StartTime = StartTime;
    this.EndDate = EndDate;
    this.EndTime = EndTime;
    this.EventTitle = EventTitle;
    this.AllDayEvent = AllDayEvent;
    this.NoEndTime = NoEndTime;
    this.EventDescription = EventDescription;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return StartTime;
    case 1: return EndDate;
    case 2: return EndTime;
    case 3: return EventTitle;
    case 4: return AllDayEvent;
    case 5: return NoEndTime;
    case 6: return EventDescription;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: StartTime = (java.lang.String)value$; break;
    case 1: EndDate = (java.lang.String)value$; break;
    case 2: EndTime = (java.lang.String)value$; break;
    case 3: EventTitle = (java.lang.String)value$; break;
    case 4: AllDayEvent = (java.lang.String)value$; break;
    case 5: NoEndTime = (java.lang.String)value$; break;
    case 6: EventDescription = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'StartTime' field.
   * @return The value of the 'StartTime' field.
   */
  public java.lang.String getStartTime() {
    return StartTime;
  }


  /**
   * Gets the value of the 'EndDate' field.
   * @return The value of the 'EndDate' field.
   */
  public java.lang.String getEndDate() {
    return EndDate;
  }


  /**
   * Gets the value of the 'EndTime' field.
   * @return The value of the 'EndTime' field.
   */
  public java.lang.String getEndTime() {
    return EndTime;
  }


  /**
   * Gets the value of the 'EventTitle' field.
   * @return The value of the 'EventTitle' field.
   */
  public java.lang.String getEventTitle() {
    return EventTitle;
  }


  /**
   * Gets the value of the 'AllDayEvent' field.
   * @return The value of the 'AllDayEvent' field.
   */
  public java.lang.String getAllDayEvent() {
    return AllDayEvent;
  }


  /**
   * Gets the value of the 'NoEndTime' field.
   * @return The value of the 'NoEndTime' field.
   */
  public java.lang.String getNoEndTime() {
    return NoEndTime;
  }


  /**
   * Gets the value of the 'EventDescription' field.
   * @return The value of the 'EventDescription' field.
   */
  public java.lang.String getEventDescription() {
    return EventDescription;
  }


  /**
   * Creates a new User RecordBuilder.
   * @return A new User RecordBuilder
   */
  public static com.example.User.Builder newBuilder() {
    return new com.example.User.Builder();
  }

  /**
   * Creates a new User RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new User RecordBuilder
   */
  public static com.example.User.Builder newBuilder(com.example.User.Builder other) {
    return new com.example.User.Builder(other);
  }

  /**
   * Creates a new User RecordBuilder by copying an existing User instance.
   * @param other The existing instance to copy.
   * @return A new User RecordBuilder
   */
  public static com.example.User.Builder newBuilder(com.example.User other) {
    return new com.example.User.Builder(other);
  }

  /**
   * RecordBuilder for User instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    private java.lang.String StartTime;
    private java.lang.String EndDate;
    private java.lang.String EndTime;
    private java.lang.String EventTitle;
    private java.lang.String AllDayEvent;
    private java.lang.String NoEndTime;
    private java.lang.String EventDescription;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.StartTime)) {
        this.StartTime = data().deepCopy(fields()[0].schema(), other.StartTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.EndDate)) {
        this.EndDate = data().deepCopy(fields()[1].schema(), other.EndDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.EndTime)) {
        this.EndTime = data().deepCopy(fields()[2].schema(), other.EndTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.EventTitle)) {
        this.EventTitle = data().deepCopy(fields()[3].schema(), other.EventTitle);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.AllDayEvent)) {
        this.AllDayEvent = data().deepCopy(fields()[4].schema(), other.AllDayEvent);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.NoEndTime)) {
        this.NoEndTime = data().deepCopy(fields()[5].schema(), other.NoEndTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.EventDescription)) {
        this.EventDescription = data().deepCopy(fields()[6].schema(), other.EventDescription);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing User instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.User other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.StartTime)) {
        this.StartTime = data().deepCopy(fields()[0].schema(), other.StartTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.EndDate)) {
        this.EndDate = data().deepCopy(fields()[1].schema(), other.EndDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.EndTime)) {
        this.EndTime = data().deepCopy(fields()[2].schema(), other.EndTime);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.EventTitle)) {
        this.EventTitle = data().deepCopy(fields()[3].schema(), other.EventTitle);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.AllDayEvent)) {
        this.AllDayEvent = data().deepCopy(fields()[4].schema(), other.AllDayEvent);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.NoEndTime)) {
        this.NoEndTime = data().deepCopy(fields()[5].schema(), other.NoEndTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.EventDescription)) {
        this.EventDescription = data().deepCopy(fields()[6].schema(), other.EventDescription);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'StartTime' field.
      * @return The value.
      */
    public java.lang.String getStartTime() {
      return StartTime;
    }

    /**
      * Sets the value of the 'StartTime' field.
      * @param value The value of 'StartTime'.
      * @return This builder.
      */
    public com.example.User.Builder setStartTime(java.lang.String value) {
      validate(fields()[0], value);
      this.StartTime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'StartTime' field has been set.
      * @return True if the 'StartTime' field has been set, false otherwise.
      */
    public boolean hasStartTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'StartTime' field.
      * @return This builder.
      */
    public com.example.User.Builder clearStartTime() {
      StartTime = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'EndDate' field.
      * @return The value.
      */
    public java.lang.String getEndDate() {
      return EndDate;
    }

    /**
      * Sets the value of the 'EndDate' field.
      * @param value The value of 'EndDate'.
      * @return This builder.
      */
    public com.example.User.Builder setEndDate(java.lang.String value) {
      validate(fields()[1], value);
      this.EndDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'EndDate' field has been set.
      * @return True if the 'EndDate' field has been set, false otherwise.
      */
    public boolean hasEndDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'EndDate' field.
      * @return This builder.
      */
    public com.example.User.Builder clearEndDate() {
      EndDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'EndTime' field.
      * @return The value.
      */
    public java.lang.String getEndTime() {
      return EndTime;
    }

    /**
      * Sets the value of the 'EndTime' field.
      * @param value The value of 'EndTime'.
      * @return This builder.
      */
    public com.example.User.Builder setEndTime(java.lang.String value) {
      validate(fields()[2], value);
      this.EndTime = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'EndTime' field has been set.
      * @return True if the 'EndTime' field has been set, false otherwise.
      */
    public boolean hasEndTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'EndTime' field.
      * @return This builder.
      */
    public com.example.User.Builder clearEndTime() {
      EndTime = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'EventTitle' field.
      * @return The value.
      */
    public java.lang.String getEventTitle() {
      return EventTitle;
    }

    /**
      * Sets the value of the 'EventTitle' field.
      * @param value The value of 'EventTitle'.
      * @return This builder.
      */
    public com.example.User.Builder setEventTitle(java.lang.String value) {
      validate(fields()[3], value);
      this.EventTitle = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'EventTitle' field has been set.
      * @return True if the 'EventTitle' field has been set, false otherwise.
      */
    public boolean hasEventTitle() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'EventTitle' field.
      * @return This builder.
      */
    public com.example.User.Builder clearEventTitle() {
      EventTitle = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'AllDayEvent' field.
      * @return The value.
      */
    public java.lang.String getAllDayEvent() {
      return AllDayEvent;
    }

    /**
      * Sets the value of the 'AllDayEvent' field.
      * @param value The value of 'AllDayEvent'.
      * @return This builder.
      */
    public com.example.User.Builder setAllDayEvent(java.lang.String value) {
      validate(fields()[4], value);
      this.AllDayEvent = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'AllDayEvent' field has been set.
      * @return True if the 'AllDayEvent' field has been set, false otherwise.
      */
    public boolean hasAllDayEvent() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'AllDayEvent' field.
      * @return This builder.
      */
    public com.example.User.Builder clearAllDayEvent() {
      AllDayEvent = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'NoEndTime' field.
      * @return The value.
      */
    public java.lang.String getNoEndTime() {
      return NoEndTime;
    }

    /**
      * Sets the value of the 'NoEndTime' field.
      * @param value The value of 'NoEndTime'.
      * @return This builder.
      */
    public com.example.User.Builder setNoEndTime(java.lang.String value) {
      validate(fields()[5], value);
      this.NoEndTime = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'NoEndTime' field has been set.
      * @return True if the 'NoEndTime' field has been set, false otherwise.
      */
    public boolean hasNoEndTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'NoEndTime' field.
      * @return This builder.
      */
    public com.example.User.Builder clearNoEndTime() {
      NoEndTime = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'EventDescription' field.
      * @return The value.
      */
    public java.lang.String getEventDescription() {
      return EventDescription;
    }

    /**
      * Sets the value of the 'EventDescription' field.
      * @param value The value of 'EventDescription'.
      * @return This builder.
      */
    public com.example.User.Builder setEventDescription(java.lang.String value) {
      validate(fields()[6], value);
      this.EventDescription = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'EventDescription' field has been set.
      * @return True if the 'EventDescription' field has been set, false otherwise.
      */
    public boolean hasEventDescription() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'EventDescription' field.
      * @return This builder.
      */
    public com.example.User.Builder clearEventDescription() {
      EventDescription = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public User build() {
      try {
        User record = new User();
        record.StartTime = fieldSetFlags()[0] ? this.StartTime : (java.lang.String) defaultValue(fields()[0]);
        record.EndDate = fieldSetFlags()[1] ? this.EndDate : (java.lang.String) defaultValue(fields()[1]);
        record.EndTime = fieldSetFlags()[2] ? this.EndTime : (java.lang.String) defaultValue(fields()[2]);
        record.EventTitle = fieldSetFlags()[3] ? this.EventTitle : (java.lang.String) defaultValue(fields()[3]);
        record.AllDayEvent = fieldSetFlags()[4] ? this.AllDayEvent : (java.lang.String) defaultValue(fields()[4]);
        record.NoEndTime = fieldSetFlags()[5] ? this.NoEndTime : (java.lang.String) defaultValue(fields()[5]);
        record.EventDescription = fieldSetFlags()[6] ? this.EventDescription : (java.lang.String) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<User>
    WRITER$ = (org.apache.avro.io.DatumWriter<User>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<User>
    READER$ = (org.apache.avro.io.DatumReader<User>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
